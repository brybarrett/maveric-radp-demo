version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: docbot-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-docbot_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-docbot_password}
      POSTGRES_DB: ${POSTGRES_DB:-docbot}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-docbot_user}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - docbot-network

  # FastAPI Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: docbot-backend
    environment:
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-docbot_user}:${POSTGRES_PASSWORD:-docbot_password}@postgres:5432/${POSTGRES_DB:-docbot}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - CLIENT=${CLIENT:-maveric}
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - DEBUG=${DEBUG:-True}
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - ./examples:/app/examples
    depends_on:
      postgres:
        condition: service_healthy
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    networks:
      - docbot-network

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: docbot-frontend
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_CLIENT=${CLIENT:-maveric}
    ports:
      - "3000:3000"
    volumes:
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public
    depends_on:
      - backend
    networks:
      - docbot-network

volumes:
  postgres_data:

networks:
  docbot-network:
    driver: bridge